{
    "contents" : "pkg.env <- new.env()\npkg.env$color1 <- rgb(0,0,0, maxColorValue = 255)\npkg.env$color2 <- rgb(0.603921568627451,0.6274509803921569,0.4862745098039216)\npkg.env$repu <- c(\"Total República, Total republica, Total república, Total Republica\")\npkg.env$ignorado <- c(\"Ignorado\", \"ignorado\", \"IGNORADO\", \"Ignorada\", \"ignorada\")\npkg.env$gris <- rgb(200,200,200, maxColorValue = 255)\npkg.env$grisBase <- rgb(152,152,152, maxColorValue = 255)\npkg.env$fontSize = 10\npkg.env$temaINE <- ggplot2::theme_gray(base_size = pkg.env$fontSize, base_family = \"Open Sans Condensed Light\")+ ggplot2::theme(\n  text= ggplot2::element_text(family = \"Open Sans Condensed Light\", face = \"plain\", colour='black', size = pkg.env$fontSize),\n  axis.text.x = ggplot2::element_text(family = \"Open Sans Condensed Light\", colour = \"black\", face = \"plain\", size = 10, hjust = 0.5, vjust =0.5, angle = 0, lineheight = 0.9),\n  axis.text.y = ggplot2::element_text(family = \"Open Sans Condensed Light\", colour = \"black\", face = \"plain\", size = 10, hjust = 0.5, vjust =0.5, angle = 0, lineheight = 0.9),\n  panel.background = ggplot2::element_rect(fill = NA),\n  panel.grid = ggplot2::element_line(colour = NA),\n  panel.grid.major = ggplot2::element_line(colour = NA),\n  panel.grid.minor = ggplot2::element_line(colour = NA),\n  panel.grid.major.y =  ggplot2::element_line(colour = NA),\n  axis.line = ggplot2::element_line(colour = pkg.env$grisBase),\n  plot.margin = rep(grid::unit(0,\"null\"),4),\n  axis.ticks = ggplot2::element_line(colour = NA),\n  axis.ticks.x = ggplot2::element_line( size=NULL, color=NA ),\n  axis.ticks.y = ggplot2::element_line(size = NULL, color=NA),\n  plot.background = ggplot2::element_rect(fill = NA)\n)\n\npkg.env$temaBarras <- pkg.env$temaINE\npkg.env$temaBarras <- pkg.env$temaBarras + ggplot2::theme(\n  axis.line.y = ggplot2::element_line(colour = pkg.env$color1),\n  axis.line.x = ggplot2::element_line(colour = NA),\n  axis.text.y = ggplot2::element_text(hjust = 1, vjust = 0.5)\n) \n\npkg.env$temaColumnas <- pkg.env$temaINE\npkg.env$temaColumnas <- pkg.env$temaBarras + ggplot2::theme(\n  axis.line.x = ggplot2::element_line(colour = pkg.env$color1),\n  axis.line.y = ggplot2::element_line(colour = NA),\n  axis.text.y = ggplot2::element_text(colour = NA)\n)\n\n#' Hace una paleta del color indicado\n#' @param data El data frame con la informacion\n#' @param color1 El color primario con el cual se desea hacer la paleta\n#' @param color2 El color secundario que va cuando encuentra palabras clave\n#' @return Vector con la rampa de colores\ncalcularRampa <- function(data, color1= pkg.env$color1, color2 = pkg.env$color2)\n{\n  rampa = NULL\n  for(elemento in data$x)\n  {\n    if(elemento %in% pkg.env$ignorado)\n    {\n      rampa = c(rampa,pkg.env$gris)\n    }\n    else if(elemento %in% pkg.env$repu)\n    {\n      rampa = c(rampa, color2)\n    }\n    else\n    {\n      rampa = c(rampa,color1)\n    }\n  }\n  return(rampa)\n}\n\n#' Funcion de uso interno para ordenar los niveles según los datos\n#' @param data El data frame con el cual se desean hacer los calculos\n#' @param ordenar Booleno que indica si se deben ordenar los datos de mayor a menor\n#' @return Vector con los valores en el orden deseado\nordenarNiveles <- function(data, ordenar = TRUE)\n{\n  nuevoOrden <- NULL\n  ignNombre <- NULL\n  ign = 0\n  orden <- NULL\n  print(ordenar)\n  if(ordenar)\n  {\n    orden <- order(data$y, decreasing = T)\n    \n  }\n  else\n  {\n    for(i in (1:length(data$x)))\n      orden <- c(orden,i)\n  }\n  for(elemento in orden)\n  {\n    if( data[elemento,]$x %in% pkg.env$ignorado)\n    {\n      ign = 1\n      pos <- elemento\n    }\n    else{\n      nuevoOrden <- c(nuevoOrden, elemento)\n    }\n  }\n  if(ign == 1)\n  {\n    nuevoOrden <- c(nuevoOrden, pos)\n  }\n  print(nuevoOrden)\n  return(nuevoOrden)\n}\n\n\n\n#'Funcion en fase que beta, en teoria mide el ancho de una palabra y determina si existe el espacio\n#'suficiente para que quepa en la grafica\n#'@param graph Objeto del tipo ggplot2 que se desea modificar\n#'@param ancho El ancho de las barras en porcentaje, segun indicaciones de ggplot2\nexisteTraslape <- function(graph,ancho = 0.6)\n{\n  ejeX <- 99.1 *0.0393700787\n  etiquetas <- ggplot2::ggplot_build(graph)$panel$ranges[[1]]$x.labels\n  tam <- list()\n  for(i in 1:length(etiquetas))\n  {\n    tam[i] <- tikzDevice::getLatexStrWidth(etiquetas[[i]], cex = ancho)   \n  }\n  lapply(tam, pt2mm)\n  nuBarras <- length(etiquetas)\n  semiEspacio <- 99.1/(2*nuBarras)\n}\n\n#' Convierte de puntos a milimetros\n#' @param unidad Valor numerico que desea ser convertido\n#' @return Valor en milimetros\n#' @export\npt2mm <- function(unidad)\n{\n  return (unidad*0.352777778)\n}\n\n#' Funcion experimental que determina cuando un dato es entero o no \n#' solamente datos enteros o del tipo flotante\n#' @param x Dato numerico\n#' @return Un valor booleano indicando si el dato es entero o flotante\n#' @export\nis.wholenumber <-\nfunction(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol\n\n#' Funcion experimental que determina si un vector numerico \n#' esta conformado exclusivamente por valores entero o no\n#' @param Vector numerico\n#' @return Un valor booleano indicando si el vector es de enteros o no\nsonEnteros <- function(data)\n{\n  contador = 0\n  res <- 0\n  for(i in (1:length(data$y))){\n    print(data$y[[i]])\n    if(is.wholenumber(data$y[[i]]) == FALSE){\n      break\n    }\n  else{\n    contador = contador +1\n    }\n  }\n  if(contador == length(data$y)){\n    res <- 1\n  }\n  else{\n    res <-0\n  }\n  return(res)\n}\n\n#' Funcion para convertir de pulgadas a milimetros\n#' @param number Dato a ser convertido\n#' @return Valor en milimetros\ninc2mm <-function(number)\n{\n  return(number*25.4)\n}\n\n#' Funcion para convertir de pulgadas a puntos\n#' @param number Dato a ser convertido\n#' @return Valor en puntos\ninc2pt <- function(number)\n{\n  return(number*72)\n}\n\n#'Funcion para convertir de milimetros a pulgadas\n#'@param number Dato a ser convertido\n#'@return Valor en pulgadas\nmm2inch <- function(number)\n{\n  return(number*0.0393700787)\n}\n\n#'Funcion para convertir de milimetros a puntos\n#'@param number Dato a ser convertido\n#'@return Valor en puntos\nmm2pt <- function(number)\n{\n  return(mm2inch(inc2pt(number)))\n}\n\n\ngraficaBar <- function(data, color1=color, ancho = 0.6, ordenar = TRUE)\n{\n  theme_set(temaBarras)\n  names(data)<- c(\"x\",\"y\")\n  data <- data[rev(ordenarNiveles(data, ordenar)),]\n  data$x <- factor(data$x, levels = data$x)\n  levels(data$x) <- gsub(\"\\\\n\", \"\\n\", levels(data$x))\n  grafica <- ggplot(data, aes(x, y))\n  grafica <- grafica + \n    geom_bar(stat = 'identity',fill = calcularRampa(data, NA), colour = calcularRampa(data, color1), width = ancho, position =  \"dodge\")+\n    labs(x=NULL,y=NULL)+\n    scale_y_continuous(breaks=NULL, expand= c(0.0,0.0))+\n    coord_flip()\n  print(grafica)\n  return(grafica)\n}\n\ngraficaLinea <- function(data, color1 = color, inicio = 0, ancho = 1.7)\n{\n  theme_set(temaColumnas)\n  names(data)<- c(\"x\",\"y\")\n  grafica <- ggplot(data, aes(x,y))\n  grafica <- grafica + geom_line( colour = color1, size = ancho)+\n    labs(x=NULL,y=NULL)\n  grafica <- etiquetasLineas(grafica, calcularPosiciones(grafica))\n  minimo <- min(ggplot_build(grafica)$data[[1]]$y)\n  maximo <- max(ggplot_build(grafica)$data[[1]]$y)\n  limite <- minimo - 0.3*(maximo - minimo)\n  if(ggplot_build(grafica)$data[[1]]$y[1] > 3)\n  {\n    grafica <- grafica + scale_y_continuous(limits = c(limite,NA))+\n      theme(plot.margin = unit(c(2.5,3,0,-7), \"mm\"))\n  }\n  else\n  {\n    grafica <- grafica + scale_y_continuous(limits = c(limite,NA))+\n      theme(plot.margin = unit(c(2.5,3,0,-4), \"mm\"))\n  }\n  return(grafica)\n}\n\ngraficaLineaTrim <- function(data, color1 = color, inicio = 0, ancho = 0.5)\n{\n  theme_set(temaColumnas)\n  names(data)<- c(\"x\",\"y\")\n  nomX <- data$x\n  data$x <- factor(data$x, as.character(data$x))\n  #data$x <- as.numeric(data$x)\n  grafica <- ggplot(data, aes(x,y, group = 1))\n  grafica <- grafica + geom_line( colour = color1, size = ancho)+\n    labs(x=NULL,y=NULL)+\n    theme(axis.text.x = element_text(family = \"Open Sans Condensed Light\",angle = 90, vjust =0.5 , hjust= 1))\n  grafica <- etiquetasLineas(grafica, calcularPosiciones(grafica))\n  minimo <- min(ggplot_build(grafica)$data[[1]]$y)\n  maximo <- max(ggplot_build(grafica)$data[[1]]$y)\n  limite <- minimo - 0.5*(maximo - minimo)\n  if(ggplot_build(grafica)$data[[1]]$y[1] > 3)\n  {\n    grafica <- grafica + scale_y_continuous(limits = c(limite,NA))+\n      theme(plot.margin = unit(c(2.5,3,0,-7), \"mm\")) #-9\n  }\n  else\n  {\n    grafica <- grafica + scale_y_continuous(limits = c(limite,NA))+\n      theme(plot.margin = unit(c(2.5,3,0,-3), \"mm\")) #-4\n  }\n  return(grafica)\n}\n\n\ncalcularPosiciones <- function(graph)\n{\n  #SIMBOLOGIA\n  # 1 HACIA ARRIBA\n  #-1 HACIA ABAJO\n  #0.5 A LA DERECHA\n  #-0.5 A LA IZQUIERDA\n  data <- ggplot_build(graph)$data[[1]]\n  print(data)\n  posiciones <- NULL\n  if(data$y[[1]] < data$y[[2]])\n  {\n    posiciones <- c(posiciones, -1)\n  }\n  else{\n    posiciones <- c(posiciones, 1)  \n  }\n  \n  \n  for(i in 2:(length(data$y)-1))\n  {\n    if(data$y[[i-1]] == data$y[[i]])\n    {\n      if(data$y[[i+1]] > data$y[[i]])\n      {\n        posiciones <- c(posiciones, -1)\n      }else if(data$y[[i+1]] == data$y[[i]])\n      {\n        posiciones <- c(posiciones, 1)\n      }else if(data$y[[i+1]] < data$y[[i]]){\n        posiciones <- c(posiciones, 1)\n      }\n    }else if(data$y[[i-1]] > data$y[[i]])\n    {\n      if(data$y[[i]] > data$y[[i+1]])\n      {\n        posiciones <- c(posiciones, 0.5)\n      }\n      else{\n        posiciones <- c(posiciones, -1)\n      }\n    }else\n    {\n      if(data$y[[i]] < data$y[[i+1]])\n      {\n        posiciones <- c(posiciones, -0.5)\n      }\n      else\n      {\n        posiciones <- c(posiciones, 1)\n      }\n    }\n  }\n  if(data$y[[length(data$y)]] == data$y[[length(data$y)-1]])\n  {\n    posiciones <- c(posiciones, 1)\n  }else if(data$y[[length(data$y)]] < data$y[[length(data$y)-1]])\n  {\n    posiciones <- c(posiciones, -1)\n  }else\n  {\n    posiciones <- c(posiciones, 1)\n  }\n  print(posiciones)\n  return(posiciones)\n}\n\n\netiquetasLineas <- function(graph, posiciones)\n{\n  d <- ggplot_build(graph)$data[[1]]\n  for(i in 1:length(posiciones))\n  {\n    dato <- d$y[[i]]\n    cat(c(\"El dato es jojo : \", dato, \"\\n\"))\n    print(i)\n    print(length(d$etiqueta))\n    d$etiqueta <- as.numeric(completarEtiquetas(dato,i,tam = length(d$x)))\n    print(\"#######################################\")\n    print(sonEnteros(d))\n    print(\"#######################################\")\n    if(sonEnteros(d) > 0)\n    {\n      if(posiciones[[i]] == 1)\n      {\n        graph <- graph + geom_text(data = d, aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 0.5, vjust = -0.5)\n      }else if(posiciones[[i]] == -1)\n      {\n        graph <- graph + geom_text(data = d,aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 0.5, vjust = 1.5)\n      }else if(posiciones[[i]] == 0.5)\n      {\n        graph <- graph + geom_text(data =d,aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 0, vjust = -0.5)\n      }\n      else\n      {\n        graph <- graph + geom_text(data = d,aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 1.2, vjust = 0)\n      }      \n    }\n    else\n    {if(posiciones[[i]] == 1)\n    {\n      graph <- graph + geom_text(data = d, aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1, drop0trailing = T)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 0.5, vjust = -0.5)\n    }else if(posiciones[[i]] == -1)\n    {\n      graph <- graph + geom_text(data = d,aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1, drop0trailing = T)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 0.5, vjust = 1.5)\n    }else if(posiciones[[i]] == 0.5)\n    {\n      graph <- graph + geom_text(data =d,aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1, drop0trailing = T)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 0, vjust = -0.5)\n    }\n    else\n    {\n      graph <- graph + geom_text(data = d,aes(label=ifelse(is.na(etiqueta),\"\",formatC(etiqueta,format = \"f\",big.mark = \",\", digits = 1, drop0trailing = T)),family=\"Open Sans Condensed Light\"),size=3.2,hjust = 1.2, vjust = 0)\n    }\n    }\n    \n  }\n  return(graph)\n}\n\ncompletarEtiquetas <- function(dato,posicion, tam = 5)\n{\n  #cat(c(\"la posicion es: \", posicion))\n  #cat(c(\"el dato es: \", dato))\n  etiquetas <- NULL\n  for(i in 1:tam)\n  {\n    if(i == posicion)\n    {\n      print(\"Entre al if\")\n      etiquetas <- c(etiquetas, dato)\n    }\n    else\n    {\n      print(\"Entre al else\")\n      etiquetas <- c(etiquetas,\"\")  \n    }\n  }\n  return(etiquetas)\n}\n\nrotarEtiX <- function(graph)\n{\n  \n  longitud <- usep + 2\n  graph <- graph + theme(axis.text.x = element_text(angle = 90, vjust =0.5 , hjust= 1))+\n    theme(plot.margin = unit(c(longitud,0,0,0), \"mm\"))\n  \n}\n\nrotarEtiX2 <- function(graph)\n{\n  max <-ggplot_build(graph)$panel$ranges[[1]]$y.range[2]\n  longitud <- getLatexStrWidth(formatC(max,format = \"f\",big.mark = \",\", digits = 1), cex = fEscala) \n  longitud <- longitud*0.352777778 + wspace\n  graph <- graph + theme(axis.text.x = element_text(angle = 90, vjust =0.5 , hjust= 1))+\n    theme(plot.margin = unit(c(longitud,0,0,0), \"mm\"))\n}\n\netiquetasBarras <- function(graph, margenIz = izBar  )\n{\n  max <-ggplot_build(graph)$panel$ranges[[1]]$x.range[2]\n  print(max)\n  longitud <- getLatexStrWidth(formatC(max,format = \"f\",big.mark = \",\", digits = 1), cex = fEscala) \n  longitud <- longitud*0.352777778 + wBarSpace\n  print(max)\n  mIz <- izBar + margenIz\n  if(sonEnteros(ggplot_build(graph)$data[[1]]) == 0)\n  {\n    print(\"jojo SI son todos enteros\")\n    graph <- graph +\n      geom_text(aes(family = \"Open Sans Condensed Light\",label= formatC(y,format = \"f\",big.mark = \",\", digits = 1, drop0trailing = T)), size=3, hjust=-0.5, vjust = 0.5)+\n      theme(plot.margin = unit(c(0,longitud,0,0), \"mm\")) \n  }\n  else\n  {\n    graph <- graph +\n      geom_text(aes(family = \"Open Sans Condensed Light\",label= formatC(y,format = \"f\",big.mark = \",\", digits = 1)), size=3, hjust=-0.5, vjust = 0.5)+\n      theme(plot.margin = unit(c(0,longitud,0,0), \"mm\")) \n  }\n  \n}\n\netiquetasHorizontales <- function(graph)\n{\n  longitud <- 4\n  if(sonEnteros(ggplot_build(graph)$data[[1]]) == 0)\n  {\n    graph <- graph +\n      geom_text(aes(family = \"Open Sans Condensed Light\",label= formatC(y,format = \"f\",digits = 1,big.mark = \",\", drop0trailing = T)),size=3, hjust=0.5, vjust = -0.5)+\n      theme(plot.margin = unit(c(longitud,0,0,0), \"mm\"))\n  }\n  else\n  {\n    graph <- graph +\n      geom_text(aes(family = \"Open Sans Condensed Light\",label= formatC(y,format = \"f\",digits = 1,big.mark = \",\")),size=3, hjust=0.5, vjust = -0.5)+\n      theme(plot.margin = unit(c(longitud,0,0,0), \"mm\"))\n  }\n}\n\netiquetasVerticales <- function(graph)\n{\n  max <-ggplot_build(graph)$panel$ranges[[1]]$y.range[2] \n  #max <- nchar(formatC(as.character(max), big.mark = \",\", format = \"f\", digits =1))\n  longitud <- getLatexStrWidth(formatC(max,format = \"f\",big.mark = \",\", digits = 1), cex = fEscala) \n  longitud <- longitud*0.352777778 + wspace\n  print(max)\n  if(sonEnteros(ggplot_build(graph)$data[[1]]) == 0)\n  {\n    graph <- graph +\n      geom_text(aes(family = \"Open Sans Condensed Light\",label= formatC(y, big.mark = \",\", format = \"f\", digits =1, drop0trailing = T)), angle = 90, size=3, hjust=-0.1, vjust = 0.5)+\n      theme(plot.margin = unit(c(longitud,0,0,0), \"mm\"))  \n  }\n  else\n  {\n    graph <- graph +\n      geom_text(aes(family = \"Open Sans Condensed Light\",label= formatC(y, big.mark = \",\", format = \"f\", digits =1)), angle = 90, size=3, hjust=-0.1, vjust = 0.5)+\n      theme(plot.margin = unit(c(longitud,0,0,0), \"mm\"))\n  }\n}\n\nexportarLatex <- function(nombre = grafica, graph)\n{\n  #gy = ggplot_build(graph)$panel$ranges[[1]]$y.range[2]\n  #print(gy)\n  #graph = graph + scale_y_continuous(expand=c(0,0),limits=c(0,gy))\n  #print(graph)\n  tikz(nombre, standAlone = FALSE, bareBones = TRUE, bg = \"transparent\",width = 3.19, height= 1.91, sanitize = F)\n  temp<- ggplot_gtable(ggplot_build(graph))\n  temp$layout$clip[temp$layout$name==\"panel\"] <- \"off\"\n  grid.draw(temp)\n  dev.off()\n  #shell(cmd=paste(\"iconv -f ISO-8859-1 -t UTF-8 <\", nombre,\">\", paste(dirname(nombre),\"/temp\",sep=\"\")), mustWork=TRUE, intern=TRUE, translate=TRUE)\n  #file.copy(from = paste(dirname(nombre), \"/temp\",sep=\"\"), to=paste(dirname(nombre),\"Generacion\",basename(nombre),sep=\"/\"), overwrite = TRUE)\n}\n\ncompilar <- function(ruta = paste(getwd(), \"Latex/ENEI.tex\",sep=\"/\")){\n  shell(cmd=paste(\"cd\", dirname(ruta), \"&&xelatex  --synctex=1 --interaction=nonstopmode\",ruta), mustWork=TRUE, intern=TRUE, translate=TRUE)\n  shell.exec(paste(dirname(ruta), \"ENEI.pdf\", sep=\"/\"))\n}\n\npreview <- function(graph)\n{\n  nombre = tempfile(pattern=\"Preview\", tmpdir= paste(normalizePath(getwd()),\"Temporal\", sep=\"\\\\\"))\n  tikz(paste(nombre,\".tex\", sep= \"\"), standAlone = TRUE, bg = \"transparent\",bareBones = FALSE, width = 3.19, height= 1.91, sanitize= F)\n  temp<- ggplot_gtable(ggplot_build(graph))\n  temp$layout$clip[temp$layout$name==\"panel\"] <- \"off\"\n  grid.draw(temp)\n  dev.off()\n  shell(cmd=paste(\"xelatex   --synctex=1 --interaction=nonstopmode\", \"--output-directory\",dirname(nombre),paste(nombre,\".tex\", sep=\"\")))\n  shell.exec(paste(nombre,\".pdf\", sep=\"\"))\n}",
    "created" : 1420940373337.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1899106376",
    "id" : "885E7A17",
    "lastKnownWriteTime" : 1420946331,
    "path" : "~/Documents/funcionesINE/R/funcionesINE.R",
    "project_path" : "R/funcionesINE.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}